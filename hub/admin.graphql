schema {
  query: AdminEndpointQuery
  mutation: AdminEndpointMutation
}

type AdminEndpointMutation {
  tvProgramSave(input: TvProgramInput!): TvProgram
  tvProgramRemove(sid: String!): Boolean
  productSave(input: ProductInput!): Product
  productRemove(sid: String!): Boolean
  productChildRemove(sid: String!, child: String!): Boolean
  titleSave(input: TitleInput!): Title
  titleRemove(sid: String!): Boolean
  encodingJobCreate(input: EncodingJobInput!): EncodingJob
  encodingJobRetry(input: EncodingJobRetryInput!): EncodingJob
  encodingJobSave(input: EncodingJobInput!): EncodingJob
  mediumTitleSave(input: MediumTitleInput!): MediumTitle
  mediumTitleRemove(medium: String!, title: String!): Boolean
  mediumSave(input: MediumInput!): Medium
  mediumRemove(sid: String!): Boolean
  trackRemove(sid: String!): Boolean
  videoTrackSave(input: VideoTrackInput!): VideoTrack
  audioTrackSave(input: AudioTrackInput!): AudioTrack
  subtitleTrackSave(input: SubtitleTrackInput!): SubtitleTrack
  applicationCreate(input: ApplicationCreateInput!): Application
  userCreate(input: UserCreateInput!): User
  userEdit(input: UserEditInput!): User
  userRemove(sid: String!): Boolean
  inventoryAdd(input: InventoryAddInput!): [Item]
  inventoryRemove(sid: String!): Boolean
  trackEncodingPassRetry(input: TrackEncodingPassRetryInput!): TrackEncodingPass
  itemSave(input: ItemInput!): Item
  itemRegistration(input: ItemRegistrationInput!): Item
  itemChildRemove(sid: String!, child: String!): Boolean
  shareTransfer(input: ShareTransferInput!): Item
  movieSave(input: MovieInput!): Movie
  tvShowSave(input: TvShowInput!): TvShow
}

type AdminEndpointQuery {
  tvProgramList(query: TvProgramListQuery!): [TvProgram]
  tvProgramCount(query: TvProgramListQuery!): Int
  tvProgramGet(query: TvProgramGetQuery!): TvProgram
  productList(query: ProductListQuery): [Product]
  productCount(query: ProductListQuery): Int
  productLookup(query: ProductLookupQuery!): [Product]
  creativeWorkLookup(query: CreativeWorkLookupQuery!): [CreativeWork]
  creativeWorkTitles(query: CreativeWorkTitlesGetQuery!): [Title]
  productGet(query: ProductGetQuery!): Product
  mediumGet(query: MediumGetQuery!): Medium
  mediumTitleGet(query: MediumTitleGetQuery!): MediumTitle
  titleGet(query: TitleGetQuery!): Title
  trackGet(query: TrackGetQuery!): Track
  userList(query: UserListQuery!): [User]
  userCount(query: UserListQuery): Int
  userGet(query: UserGetQuery!): User
  itemGet(query: ItemGetQuery!): Item
  itemLookup(query: ItemLookupQuery!): [Item]
  inventoryGet(query: InventoryGetQuery!): [Item]
  inventoryCount(query: InventoryGetQuery): Int
  titleList(query: TitleListQuery!): [Title]
  titleCount(query: TitleListQuery): Int
  packagingEnum: [Packaging]
  supportTypeEnum: [SupportType]
  zoneEnum: [Zone]
  movieList(query: MovieCatalogGetQuery!): [Movie]
  movieCount(query: MovieCatalogGetQuery!): Int!
  movieGet(query: MovieGetQuery!): Movie
  tvShowList(query: TvShowCatalogGetQuery!): [TvShow]
  tvShowCount(query: TvShowCatalogGetQuery!): Int!
  tvShowGet(query: TvShowGetQuery!): TvShow
  tvShowSeasonGet(query: TvShowSeasonGetQuery!): TvShowSeason
  tvShowSeasonEpisodeList(query: TvShowSeasonEpisodesGetQuery!): [TvShowEpisode]
  tvShowSeasonEpisodeCount(query: TvShowSeasonEpisodesGetQuery!): Int!
  tvShowEpisodeGet(query: TvShowEpisodeGetQuery!): TvShowEpisode
  registerGet(query: RegisterGetQuery!): [RegisterEntry]
  registerCount(query: RegisterGetQuery): Int
}

type Application {
  clientId: String
  clientSecret: String
}

input ApplicationCreateInput {
  user: String!
}

type AspectRatio {
  value: Float
}

type AudioTrack implements Track {
  sid: String
  hash: String
  index: Int
  name: String
  codec: String
  default: Boolean
  enabled: Boolean
  type: String
  title: Title
  language: Language
  bitRate: BitRate
  channels: Int
  channelLayout: ChannelLayout
  audioDescription: Boolean
  audioCommentary: Boolean
}

input AudioTrackInput {
  sid: String
  hash: String
  index: Int
  codec: String
  default: Boolean
  enabled: Boolean
  language: String
  name: String
  bitRate: Int
  channels: Int
  channelLayout: String
  audioDescription: Boolean
  audioCommentary: Boolean
}

type BitRate {
  value: Int
}

type ChannelLayout {
  value: String
  label: String
}

interface CreativeWork {
  sid: String
  name: String
  duration: Int
  originalName: String
  type: String
  tmdbId: String
  tmdbUrl: String
  imdbId: String
  imdbUrl: String
  genres: [Genre]
  rating: Rating
  image(variation: ImageVariationInput): String
  backdrop(variation: ImageVariationInput): String
  overview: String
  voteAverage: Float
  ageRecommendation: Int
  releaseYear: Int
  isSuitableForLittleKids: Boolean
  isSuitableForBigKids: Boolean
  isSuitableForTweens: Boolean
}

input CreativeWorkLookupQuery {
  type: String
  name: String
  originalName: String
  releaseYear: Int
}

input CreativeWorkTitlesGetQuery {
  sid: String!
  owner: String
}

type EncodingJob {
  sid: String!
  title: Title!
  source: String!
}

input EncodingJobInput {
  sid: String
  status: String
  preset: String
  start: Int
  duration: Int
  title: String
  autoPublish: Boolean
}

input EncodingJobRetryInput {
  sid: String
  autoPublish: Boolean
}

type FrameRate {
  value: Int
}

type Genre {
  slug: String
  value: String
  label: String
}

input ImageVariationInput {
  w: Int
  h: Int
  dpr: Int
  bg: String
  fm: String
  auto: String
  minH: Int
  minW: Int
  maxH: Int
  maxW: Int
  fit: String
  fill: String
  fillColor: String
  trim: String
  trimColor: String
  q: Int
  blur: Int
  crop: String
  ar: String
}

input InventoryAddInput {
  products: [ProductLookupQuery]!
}

input InventoryGetQuery {
  owner: String
  offset: Int
  limit: Int
}

type Item {
  sid: String!
  dateAdded: String
  product: Product!
  sku: String!
  label: String!
  barcode(h: Int): SvgImage!
  shareCapital: Int
  userShares(user: String!): Int
  children: [Item]
  childrenCount: Int
  price: Money
}

input ItemChildrenInput {
  items: [String]
  clearExistingItems: Boolean
}

input ItemGetQuery {
  sid: String
}

input ItemInput {
  sid: String
  children: ItemChildrenInput
}

input ItemLookupQuery {
  sku: String
}

input ItemRegistrationInput {
  owner: String!
  item: String!
}

type Language {
  code: String
  name: String
}

type Medium {
  sid: String!
  product: Product
  number: Int
  volumeName: String
  support: SupportType
  zones: [Zone]
  size: String
  titles: [MediumTitle]
}

input MediumGetQuery {
  sid: String
}

input MediumInput {
  sid: String
  product: String
  support: String
  volumeName: String
  discNumber: Int
  zones: [String]
  hash: String
  size: String
}

type MediumTitle {
  medium: Medium
  title: Title
  order: Int
  activated: Boolean
}

input MediumTitleGetQuery {
  medium: String!
  title: String!
}

input MediumTitleInput {
  title: String!
  medium: String!
  discNumber: Int
  order: Int
  activated: Boolean
}

type Money {
  amount: Int!
  currency: String!
}

type Movie implements CreativeWork {
  sid: String
  name: String
  duration: Int
  originalName: String
  type: String
  tmdbId: String
  tmdbUrl: String
  imdbId: String
  imdbUrl: String
  genres: [Genre]
  rating: Rating
  image(variation: ImageVariationInput): String
  backdrop(variation: ImageVariationInput): String
  overview: String
  voteAverage: Float
  ageRecommendation: Int
  releaseYear: Int
  isSuitableForLittleKids: Boolean
  isSuitableForBigKids: Boolean
  isSuitableForTweens: Boolean
  releaseDate: String
  length: Int
  lengthFmt: String
  poster(variation: ImageVariationInput): String
}

input MovieCatalogGetQuery {
  owner: String
  sort: String
  filters: [QueryFilter]
  offset: Int
  limit: Int
}

input MovieGetQuery {
  sid: String
  imdbId: String
  tmdbId: String
}

input MovieInput {
  sid: String!
  poster: String
  backdrop: String
  ageRecommendation: Int
}

type Packaging {
  slug: String
  value: String
  label: String
}

type Product {
  metadata: ProductMetadata
  sid: String!
  locked: Boolean
  gtin: String!
  ean: String!
  name: String!
  releaseDate: String
  image(variation: ImageVariationInput): String
  label: String!
  barcode(h: Int): SvgImage!
  backCover(variation: ImageVariationInput): String
  asin: String
  publisher: String
  description: String
  bonuses: String
  packaging: Packaging
  discs: Int
  mediaCount: Int
  media: [Medium]
  titlesCount: Int
  titles: [Title]
  children: [Product]
  childrenCount: Int
}

input ProductChildrenInput {
  items: [String]
  clearExistingItems: Boolean
}

input ProductGetQuery {
  sid: String
}

input ProductInput {
  sid: String
  locked: Boolean
  gtin: String
  name: String
  releaseDate: String
  status: String
  backCover: String
  enhanceBackcover: Boolean
  image: String
  publisher: String
  packaging: String
  enhanceImage: Boolean
  asin: String
  description: String
  bonuses: String
  discs: Int
  titles: ProductTitlesInput
  children: ProductChildrenInput
}

input ProductListQuery {
  offset: Int
  limit: Int
}

input ProductLookupQuery {
  type: String
  value: String!
}

type ProductMetadata {
  createdAt: String
  updatedAt: String
  completionRate: Float!
  completionRatePercent: Int
}

input ProductTitlesInput {
  items: [TitleInput]
  clearExistingItems: Boolean
}

input QueryFilter {
  key: String!
  values: [String]!
}

input QueryPaginationInput {
  offset: Int
  limit: Int
}

type Rating {
  slug: String
  value: String
  label: String
  score: Int
}

type RegisterEntry {
  sid: String!
  date: String!
  item: Item!
  owner: User!
  shares: Int!
}

input RegisterGetQuery {
  item: String
  offset: Int
  limit: Int
}

input ShareTransferInput {
  item: String!
  transferee: String!
  shares: Int
  transferor: String
}

type SubtitleTrack implements Track {
  sid: String
  hash: String
  index: Int
  name: String
  codec: String
  default: Boolean
  enabled: Boolean
  type: String
  title: Title
  language: Language
  forced: Boolean
  closedCaptions: Boolean
}

input SubtitleTrackInput {
  sid: String
  hash: String
  index: Int
  name: String
  default: Boolean
  enabled: Boolean
  language: String
  forced: Boolean
  closedCaptions: Boolean
}

type SupportType {
  value: String
  label: String
}

type SvgImage {
  rawContent: String!
  dataImage: String!
}

type Title {
  sid: String!
  name: String
  duration: Int
  size: String
  playlist: String
  source: String
  creativeWork: CreativeWork
  tracks: [Track]
  videoTracks: [VideoTrack]
  audioTracks: [AudioTrack]
  subtitleTracks: [SubtitleTrack]
}

input TitleGetQuery {
  sid: String
  hash: String
}

input TitleInput {
  sid: String
  tmdbId: String
  movie: String
  show: String
  season: Int
  episode: Int
  medium: String
  hash: String
  name: String
  product: String
  discNumber: Int
  duration: Int
  size: String
  activated: Boolean
  unsetCreativeWork: Boolean
  videoTracks: [VideoTrackInput]
  audioTracks: [AudioTrackInput]
  subtitleTracks: [SubtitleTrackInput]
}

input TitleListQuery {
  offset: Int
  limit: Int
}

interface Track {
  sid: String
  hash: String
  index: Int
  name: String
  codec: String
  default: Boolean
  enabled: Boolean
  type: String
  title: Title
}

type TrackEncodingPass {
  sid: String!
  status: String
}

input TrackEncodingPassRetryInput {
  sid: String
}

input TrackGetQuery {
  sid: String
}

type TvChannel {
  sid: String!
  slug: String!
  name: String!
  logo: String
}

type TvProgram {
  sid: String!
  slug: String!
  name: String
  originalName: String
  releaseYear: String
  channel: TvChannel!
  creativeWork: CreativeWork
  startDate: String
  endDate: String
}

input TvProgramGetQuery {
  sid: String
}

input TvProgramInput {
  sid: String!
  tmdbId: String
}

input TvProgramListQuery {
  from: String!
  to: String!
  package: String
  offset: Int
  limit: Int
}

type TvShow implements CreativeWork {
  sid: String
  name: String
  duration: Int
  originalName: String
  type: String
  tmdbId: String
  tmdbUrl: String
  imdbId: String
  imdbUrl: String
  genres: [Genre]
  rating: Rating
  image(variation: ImageVariationInput): String
  backdrop(variation: ImageVariationInput): String
  overview: String
  voteAverage: Float
  ageRecommendation: Int
  releaseYear: Int
  isSuitableForLittleKids: Boolean
  isSuitableForBigKids: Boolean
  isSuitableForTweens: Boolean
  seasons: [TvShowSeason]
  poster(variation: ImageVariationInput): String
}

input TvShowCatalogGetQuery {
  owner: String
  sort: String
  filters: [QueryFilter]
  offset: Int
  limit: Int
}

type TvShowEpisode implements CreativeWork {
  sid: String
  name: String
  duration: Int
  originalName: String
  type: String
  tmdbId: String
  tmdbUrl: String
  imdbId: String
  imdbUrl: String
  genres: [Genre]
  rating: Rating
  image(variation: ImageVariationInput): String
  backdrop(variation: ImageVariationInput): String
  overview: String
  voteAverage: Float
  ageRecommendation: Int
  releaseYear: Int
  isSuitableForLittleKids: Boolean
  isSuitableForBigKids: Boolean
  isSuitableForTweens: Boolean
  season: TvShowSeason!
  show: TvShow!
  fullName: String!
  shortName: String!
  number: Int!
  length: Int
  lengthFmt: String
}

input TvShowEpisodeGetQuery {
  sid: String
  show: TvShowGetQuery
  season: Int
  number: Int
}

input TvShowGetQuery {
  sid: String
  imdbId: String
  tmdbId: String
}

input TvShowInput {
  sid: String!
  poster: String
  backdrop: String
  ageRecommendation: Int
}

type TvShowSeason {
  sid: String
  show: TvShow!
  name: String!
  number: Int!
  tmdbId: String
  overview: String
  episodes(pagination: QueryPaginationInput): [TvShowEpisode]
}

input TvShowSeasonEpisodesGetQuery {
  sid: String
  offset: Int
  limit: Int
}

input TvShowSeasonGetQuery {
  sid: String
  show: TvShowGetQuery
  number: Int
}

type User {
  sid: String!
  idpId: String!
  createdAt: String!
  code: String!
  username: String!
  email: String!
  application: Application
  avatar(variation: ImageVariationInput): String
  barcode(h: Int): SvgImage!
  label: String!
  system: Boolean!
}

input UserCreateInput {
  idpId: String
  email: String
  username: String
  avatar: String
  password: String
}

input UserEditInput {
  sid: String
  idpId: String
  avatar: String
}

input UserGetQuery {
  sid: String
  code: String
  username: String
  idpId: String
  clientId: String
}

input UserListQuery {
  sort: String
  offset: Int
  limit: Int
}

type VideoTrack implements Track {
  sid: String
  hash: String
  index: Int
  name: String
  codec: String
  default: Boolean
  enabled: Boolean
  type: String
  title: Title
  frameRate: FrameRate
  width: Int
  height: Int
  resolution: String
  aspectRatio: AspectRatio
}

input VideoTrackInput {
  sid: String
  hash: String
  index: Int
  name: String
  codec: String
  default: Boolean
  enabled: Boolean
  aspectRatio: Float
  width: Int
  height: Int
  frameRate: Int
}

type Zone {
  value: String
  label: String
}
