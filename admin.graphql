schema {
  query: AdminEndpointQuery
  mutation: AdminEndpointMutation
}

type AdminEndpointMutation {
  tvProgramSave(input: TvProgramInput!): TvProgram
  tvProgramRemove(sid: String!): Boolean
  productSave(input: ProductInput!): Product
  productRemove(sid: String!): Boolean
  productChildRemove(sid: String!, child: String!): Boolean
  titleSave(input: TitleInput!): Title
  titleRemove(sid: String!, medium: String!): Boolean
  mediumSave(input: MediumInput!): Medium
  mediumRemove(sid: String!): Boolean
}

type AdminEndpointQuery {
  tvProgramList(from: String!, to: String!, package: String): TvProgramConnection
  tvProgramGet(query: TvProgramGetQuery!): TvProgram
  productList(after: String, first: Int): ProductConnection
  productLookup(query: ProductLookupQuery!): [Product]
  creativeWorkLookup(query: CreativeWorkLookupQuery!): [CreativeWork]
  productGet(query: ProductQuery!): Product
  packagingEnum: [Packaging]
  supportTypeEnum: [SupportType]
  zoneEnum: [Zone]
}

type AudioTrack {
  language: String!
}

interface CreativeWork {
  sid: String
  name: String
  duration: Int
  originalName: String
  type: String
  tmdbId: String
  tmdbUrl: String
  imdbId: String
  imdbUrl: String
  genres: [Genre]
  rating: Rating
  image(variation: ImageVariationInput): String
  backdrop(variation: ImageVariationInput): String
  overview: String
  voteAverage: Float
  ageRecommendation: Int
  releaseYear: Int
  isSuitableForLittleKids: Boolean
  isSuitableForBigKids: Boolean
  isSuitableForTweens: Boolean
}

input CreativeWorkLookupQuery {
  type: String
  name: String
  originalName: String
  releaseYear: Int
}

type Genre {
  slug: String
  value: String
  label: String
}

input ImageVariationInput {
  w: Int
  h: Int
  dpr: Int
  bg: String
  fm: String
  auto: String
  minH: Int
  minW: Int
  fit: String
  fill: String
  fillColor: String
  trim: String
  trimColor: String
  q: Int
  blur: Int
  crop: String
}

type Medium {
  sid: String!
  product: Product
  number: Int
  volumeName: String
  support: SupportType
  zone: Zone
  size: String
  titles: [Title]
}

input MediumInput {
  sid: String
  product: String
  support: String
  volumeName: String
  discNumber: Int
  zone: String
  hash: String
  size: String
}

type Movie implements CreativeWork {
  sid: String
  name: String
  duration: Int
  originalName: String
  type: String
  tmdbId: String
  tmdbUrl: String
  imdbId: String
  imdbUrl: String
  genres: [Genre]
  rating: Rating
  image(variation: ImageVariationInput): String
  backdrop(variation: ImageVariationInput): String
  overview: String
  voteAverage: Float
  ageRecommendation: Int
  releaseYear: Int
  isSuitableForLittleKids: Boolean
  isSuitableForBigKids: Boolean
  isSuitableForTweens: Boolean
  releaseDate: String
  length: Int
  lengthFmt: String
}

type Packaging {
  slug: String
  value: String
  label: String
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Product {
  metadata: ProductMetadata
  sid: String!
  gtin: String!
  ean: String!
  name: String!
  releaseDate: String
  image(variation: ImageVariationInput): String
  backCover(variation: ImageVariationInput): String
  asin: String
  publisher: String
  description: String
  packaging: Packaging
  discs: Int
  mediaCount: Int
  media: [Medium]
  titlesCount: Int
  titles: [Title]
  children: [Product]
  childrenCount: Int
}

input ProductChildrenInput {
  items: [String]
  clearExistingItems: Boolean
}

"""A connection to a list of items."""
type ProductConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [ProductEdge]
}

"""An edge in a connection."""
type ProductEdge {
  """The item at the end of the edge."""
  node: Product

  """A cursor for use in pagination."""
  cursor: String!
}

input ProductInput {
  sid: String
  gtin: String
  name: String
  releaseDate: String
  status: String
  backCover: String
  enhanceBackcover: Boolean
  image: String
  publisher: String
  packaging: String
  enhanceImage: Boolean
  asin: String
  description: String
  discs: Int
  titles: ProductTitlesInput
  children: ProductChildrenInput
}

input ProductLookupQuery {
  type: String
  value: String!
}

type ProductMetadata {
  createdAt: String
  updatedAt: String
  completionRate: Float!
  completionRatePercent: Int
}

input ProductQuery {
  sid: String
}

input ProductTitlesInput {
  items: [TitleInput]
  clearExistingItems: Boolean
}

type Rating {
  slug: String
  value: String
  label: String
  score: Int
}

type SubtitleTrack {
  language: String!
}

type SupportType {
  value: String
  label: String
}

type Title {
  sid: String!
  name: String
  duration: Int
  size: String
  creativeWork: CreativeWork
  videoTracks: [VideoTrack]
  audioTracks: [AudioTrack]
  subtitleTracks: [SubtitleTrack]
}

input TitleInput {
  sid: String
  tmdbId: String
  medium: String
  hash: String
  name: String
  product: String
  discNumber: Int
  duration: Int
  size: String
}

type TvChannel {
  sid: String!
  slug: String!
  name: String!
  logo: String
}

type TvProgram {
  sid: String!
  slug: String!
  name: String
  originalName: String
  releaseYear: String
  channel: TvChannel!
  creativeWork: CreativeWork
  startDate: String
  endDate: String
}

"""A connection to a list of items."""
type TvProgramConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """Information to aid in pagination."""
  edges: [TvProgramEdge]
}

"""An edge in a connection."""
type TvProgramEdge {
  """The item at the end of the edge."""
  node: TvProgram

  """A cursor for use in pagination."""
  cursor: String!
}

input TvProgramGetQuery {
  sid: String
}

input TvProgramInput {
  sid: String!
  tmdbId: String
}

type TvShow implements CreativeWork {
  sid: String
  name: String
  duration: Int
  originalName: String
  type: String
  tmdbId: String
  tmdbUrl: String
  imdbId: String
  imdbUrl: String
  genres: [Genre]
  rating: Rating
  image(variation: ImageVariationInput): String
  backdrop(variation: ImageVariationInput): String
  overview: String
  voteAverage: Float
  ageRecommendation: Int
  releaseYear: Int
  isSuitableForLittleKids: Boolean
  isSuitableForBigKids: Boolean
  isSuitableForTweens: Boolean
  seasons: [TvShowSeason]
}

type TvShowEpisode implements CreativeWork {
  sid: String
  name: String
  duration: Int
  originalName: String
  type: String
  tmdbId: String
  tmdbUrl: String
  imdbId: String
  imdbUrl: String
  genres: [Genre]
  rating: Rating
  image(variation: ImageVariationInput): String
  backdrop(variation: ImageVariationInput): String
  overview: String
  voteAverage: Float
  ageRecommendation: Int
  releaseYear: Int
  isSuitableForLittleKids: Boolean
  isSuitableForBigKids: Boolean
  isSuitableForTweens: Boolean
  fullName: String!
  season: Int!
  number: Int!
  show: TvShow!
  length: Int
  lengthFmt: String
}

type TvShowSeason {
  name: String!
  number: Int!
  episodes: Int
  tmdbId: String
  overview: String
}

type VideoTrack {
  resolution: String
  aspectRatio: String
}

type Zone {
  value: String
  label: String
}
